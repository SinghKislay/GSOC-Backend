{"version":3,"sources":["components/CardSurface.js","containers/AppSurface.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","width","backgroundColor","palette","primary","main","media","height","CardSurface","classes","Card","className","CardActionArea","CardMedia","image","title","CardContent","Typography","color","gutterBottom","variant","component","CardActions","Button","size","flexGrow","AppSurface","Grid","container","item","xs","sm","md","lg","style","marginTop","display","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","padding","AppBarComp","props","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","onClick","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","App","Boolean","window","location","hostname","match","createMuiTheme","type","light","dark","secondary","background","default","responsiveFontSizes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d170f037.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n  root: {\r\n    margin: 'auto',\r\n    width: '98%',\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  media: {\r\n    height: 250,\r\n  },\r\n}));\r\n\r\nexport default function CardSurface() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography color=\"inherit\" gutterBottom variant=\"h5\" component=\"h2\">\r\n            Disease\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"inherit\" component=\"p\">\r\n          Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop.\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"secondary\">\r\n          Share\r\n        </Button>\r\n        <Button size=\"small\" color=\"secondary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardSurface from '../components/CardSurface'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \r\n    flexGrow: 1,\r\n  },\r\n  \r\n}));\r\n\r\nexport default function AppSurface() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container >\r\n      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n      <div style={{marginTop:8}}>\r\n      <CardSurface/>\r\n      </div>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n      <div style={{marginTop:8}}>\r\n      <CardSurface/>\r\n      </div>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n      <div style={{marginTop:8}}>\r\n      <CardSurface/>\r\n      </div>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n      <div style={{marginTop:8}}>\r\n      <CardSurface/>\r\n      </div>\r\n      </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppSurface from '../containers/AppSurface'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction AppBarComp(props) {\r\n  const { container } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon color='secondary' /> : <MailIcon color='secondary' />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon color='secondary' /> : <MailIcon color='secondary' />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Responsive drawer\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true,\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <AppSurface/>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nAppBarComp.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  container: PropTypes.any,\r\n};\r\n\r\nexport default AppBarComp;\r\n","import React from 'react';\nimport AppBarComp from './components/AppBar'\nimport AppSurface from './containers/AppSurface'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBarComp/>\n      \n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {MuiThemeProvider,  responsiveFontSizes, createMuiTheme } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n//import blueGray from '@material-ui/core/colors/blueGray';\n\nlet theme = createMuiTheme({\n    palette:{\n        type: \"dark\",\n        primary:{\n            light: '#607d8b',\n            main: '#37474f',\n            dark: '#263238',\n            \n        },\n\n        secondary:{\n            light: '#ff9800',\n            main: '#fb8c00',\n            dark: '#ef6c00',\n            \n        },\n        \n        background: {\n            default:\"#263238\",\n        },\n    },\n        \n})\ntheme = responsiveFontSizes(theme);\n\nconst Index = () => {\n    return(\n        \n        <MuiThemeProvider theme={theme}>\n            <CssBaseline/>\n                <App />\n        </MuiThemeProvider>\n    );\n}\n\n\nReactDOM.render(<Index />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}